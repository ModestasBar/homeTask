1. When is a good idea to user recursion and when iteration? - When pattern is strictly functional recursion,
     Iteration take less space, and sometmes is faster than recursion. 
     Each time function have to create scope and variables inside using recursion.
2. What data set should I use for large content? Array, linked lists??
3. Functional programming? Two rules?
     1. Function can not mutate any variables which are not in her functional scope.
     2. Does not interfere with any parameters other than those who are passed by to her.

4. Modularity of code in JavaScript? - Divide everything into modules, not expose anything to global context
5. Should I use modularity in JavaScript? Singleton pattern, Constructor pattern
5. What is good naming conventions?   
     - self explainable, short names
6. What is side effect in functional programming? 
     - global variable mutations when passed as parameters for function
7. This is called a immediately invoked function? When to use it? 
     - Function which is invoke immediately, to hide data from global scope
8. Bundlers Transpilers? Browserify babel. Webpack? Bundler to create a "bundle" of all js files and form one - Browserify.
     Transpiler - translate one code language into other language -Babel.
     Webpack - make bundling and tranpiling and other more stuffs at once.  
9. When should I declare global variables?
10. How to avoid using global scopes in JavaScript? 
     Revealing module pattern - pattern which allow dataSets and functions to be private or public.
     By revealing modules(functions, datasets) in return object, they become accessible in public. 
     At the end, have to "()" that function would be immediately call. 
11. Is it a good practice to mix between design patterns?



12. Variables called by value and by references? Different? Which are which? 
     -By value all primitive types,
     -By reference only arrays.

13. All types of numbers in JavaScript is? All are floating points 64bit but converting to 32bits
14. ES6 Binary literals 

15. What is calling function in JavaScript? 

16. Calling functions as references in other function arguments? Calling callback 
     -(Piece of executable code which is being passed as a parameter and expecting to be executed at certen time);
17. Why we can pass it function as parameter? 
    - Because functions are first class objects in JavaScript. Naming is callBack function

18. What is a design pattern? 
     - Coding structure to solve some common problems that developers face. Singleton, 
19. Static - functions that are not called of the class instance but from the class itself. Used for utility functios - getColor

use strict - Mode that declare that code have to be executed in a strict modo - example - variables can not be undeclared.
super - keyword to call a class which he extend

20. Scope types in JavaScript:
     Global - scope where all variables and functions are declared first
     Local - where variables declared in function scope
     Lexical scope - when functions is declared in another functions, her lexical scope is outer function.
          Lexical scope start to look from most inner scope and climb each scope when reach most outer one.
     Block scope - like conditions, or loops - variables declared in that scope belongs only to them.
     Public scope and private - use patter - revealing module design to hide functions from global scope.
